股票策略回測時常遇到問題。

部位如何分配？

你以為基金經理人都是一拍腦袋就等分部位了嗎？

或玩點玄乎的斐波拉契數列？

OMG，誰說的黃金比例，讓我看到你的腦袋（不削才怪）！ ！



其實，這個問題，好多好多年前馬科維茲（Markowitz）我喜愛的小馬哥就給出答案──投資組合理論。


根據這個理論，我們可以對多元資產的組合配置進行三方面的最佳化。

1.找到有效前沿。在既定的報酬率下使組合的變異數最小。

2.找出sharpe最優的組合（收益-風險均衡點）
3.找出風險最小的組合



跟著我，一步兩步，輕鬆實現。

此理論是基於用平均值和變異數來表述組合的優劣的前提。將選取幾隻股票，並用蒙特卡羅模擬初步探究組合的有效前沿。

透過最大Sharpe和最小方差兩種最佳化來找到最優的資產組合配置權重參數。

最後，刻畫出可能的分佈，兩種最優以及組合的有效前緣。



註：
文中的數據API來自量化平台聚寬，在此表示感謝。

原文請見【組合管理】－投資組合理論（有效前緣）（包含常態檢定部分）



0.導入需要的包
import pandas as pd

import numpy as np

import statsmodels.api as sm #統計運算

import scipy.stats as scs #科學計算

import matplotlib.pyplot as plt #繪圖


1.選取幾檔有興趣的股票
000413 東旭光電，000063 中興通訊，002007 華蘭生物，000001 平安銀行，000002 萬科A

並比較一下數據（2015-01-01至2015-12-31）

In[1]:

stock_set = ['000413.XSHE','000063.XSHE','002007.XSHE','000001.XSHE','000002.XSHE']

noa = len(stock_set)

df = get_price(stock_set, start_date = '2015-01-01', end_date ='2015-12-31', 'daily', ['close'])

data = df['close']

#標準化後時序數據

(data/data.ix[0]*100).plot(figsize = (8,5))

Out[1]:



2.計算不同證券的平均值、協方差
每年252個交易日，用每日收益得到年化收益。計算投資資產的協方差是建構資產組合過程的核心部分。運用pandas內建方法生產協方差矩陣。

In [2]:

returns = np.log(data / data.shift(1))

returns.mean()*252

Out[2]:
000413.XSHE 0.184516

000063.XSHE 0.176790

002007.XSHE 0.309077

000001.XSHE -0.102059

000002.XSHE 0.547441



In [3]:

returns.cov()*252

Out[3]:


3.給不同資產隨機分配初始權重
由於A股不允許建立空頭部位，所有的權重係數均在0-1之間

In [4]:

weights = np.random.random(noa)

weights /= np.sum(weights)

weights

Out[4]:
array([ 0.37505798, 0.21652754, 0.31590981, 0.06087709, 0.03162758])



4.計算預期組合年化報酬、組合變異數和組合標準差
In [5]:

np.sum(returns.mean()*weights)*252

Out[5]:
0.21622558669017816



In [6]:

np.dot(weights.T, np.dot(returns.cov()*252,weights))

Out[6]:
0.23595133640121463



In [7]:

np.sqrt(np.dot(weights.T, np.dot(returns.cov()* 252,weights)))

Out[7]:
0.4857482232609962



5.用蒙特卡羅模擬產生大量隨機組合
進行到此，我們最想知道的是給定的一個股票池（證券組合）如何找到風險和收益平衡的位置。

下面透過一次蒙特卡羅模擬，產生大量隨機的權重向量，並記錄隨機組合的預期收益和變異數。

In [8]:

port_returns = []

port_variance = []

for p in range(4000):

weights = np.random.random(noa)

weights /=np.sum(weights)

port_returns.append(np.sum(returns.mean()*252*weights))

port_variance.append(np.sqrt(np.dot(weights.T, np.dot(returns.cov()*252, weights))))

port_returns = np.array(port_returns)

port_variance = np.array(port_variance)

#無風險利率設定為4%

risk_free = 0.04

plt.figure(figsize = (8,4))

plt.scatter(port_variance, port_returns, c=(port_returns-risk_free)/port_variance, marker = 'o')

plt.grid(True)

plt.xlabel('excepted volatility')

plt.ylabel('expected return')

plt.colorbar(label = 'Sharpe ratio')

Out[8]:



6.投資組合優化1——sharpe最大
建立statistics函數來記錄重要的投資組合統計（收益，方差和夏普比）

透過約束最優問題的求解，得到最優解。其中約束是權重總和為1。

In [9]:

def statistics(weights):

weights = np.array(weights)

port_returns = np.sum(returns.mean()*weights)*252

port_variance = np.sqrt(np.dot(weights.T, np.dot(returns.cov()*252,weights)))

return np.array([port_returns, port_variance, port_returns/port_variance])

#最優化投資組合的推導是一個約束最優化問題

import scipy.optimize as sco

#最小化夏普指數的負值

def min_sharpe(weights):

return -statistics(weights)[2]

#約束是所有參數(權重)的總和為1。這可以用minimize函數的約定來表達如下

cons = ({'type':'eq', 'fun':lambda x: np.sum(x)-1})

#我們也將參數值(權重)限制在0和1之間。這些值以多個元組組成的一個元組形式提供給最小化函數

bnds = tuple((0,1) for x in range(noa))

#優化函數呼叫中忽略的唯一輸入是起始參數列表(對權重的初始猜測)。我們簡單的使用平均分佈。

opts = sco.minimize(min_sharpe, noa*[1./noa,], method = 'SLSQP', bounds = bnds, constraints = cons)

opts

Out[9]:

status: 0

success: True

njev: 4

nfev: 28

fun: -1.1623048291871221

x: array([ -3.60840218e-16, 2.24626781e-16, 1.63619563e-01, -2.27085639e-16, 8.36380437e-01])

message: 'Optimization terminated successfully.'

jac: array([ 1.81575805e-01, 5.40387481e-01, 8.18073750e-05, 1.03137662e+00, -1.60038471e-05, 0.00000)

nit: 4



所得的最優組合權重向量為：

In [10]:

opts['x'].round(3)

Out[10]:

array([-0. , 0. , 0.164, -0. , 0.836])



sharpe最大的組合3個統計數據分別為：

In [11]:

#預期收益率、預期波動率、最優夏普指數

statistics(opts['x']).round(3)

Out[11]:
array([ 0.508, 0.437, 1.162])



7.投資組合最佳化2——方差最小
接下來，我們透過方差最小來選出最適投資組合。

In [12]:

#但是我們定義一個函數對方差進行最小化

def min_variance(weights):

return statistics(weights)[1]

optv = sco.minimize(min_variance, noa*[1./noa,],method = 'SLSQP', bounds = bnds, constraints = cons)

optv

Out[12]:

status: 0

success: True

njev: 7

nfev: 50

fun: 0.38542969450547221

x: array([ 1.14787640e-01, 3.28089742e-17, 2.09584008e-01, 3.53487044e-01, 3.22141307e-01])

message: 'Optimization terminated successfully.'

jac: array([ 0.3851725 , 0.43591119, 0.3861807 , 0.3849672 , 0.38553924, 0. ])

nit: 7



方差最小的最優組合權重向量及組合的統計量分別為：

In [13]:

optv['x'].round(3)

Out[13]:

array([ 0.115, 0. , 0.21 , 0.353, 0.322])



In [14]:

#得到的預期收益率、波動率和夏普指數

statistics(optv['x']).round(3)

Out[14]:

array([ 0.226, 0.385, 0.587])



8.組合的有效前沿
有效前緣有既定的目標報酬率下方差最小的投資組合構成。

在最佳化時採用兩個約束，1.給定目標報酬率，2.投資組合權重和為1。

In [15]:

def min_variance(weights):

return statistics(weights)[1]

#在不同目標報酬率水準（target_returns）循環時，最小化的一個限制條件會改變。

target_returns = np.linspace(0.0,0.5,50)

target_variance = []

for tar in target_returns:

cons = ({'type':'eq','fun':lambda x:statistics(x)[0]-tar},{'type':'eq','fun':lambda x:np.sum( x)-1})

res = sco.minimize(min_variance, noa*[1./noa,],method = 'SLSQP', bounds = bnds, constraints = cons)

target_variance.append(res['fun'])

target_variance = np.array(target_variance)



以下是最優化結果的展示。

叉號：構成的曲線是有效前沿（目標殖利率下最優的投資組合）

紅星：sharpe最大的投資組合

黃星：方差最小的投資組合

In [16]:

plt.figure(figsize = (8,4))

#圓圈：蒙地卡羅隨機產生的組合分佈

plt.scatter(port_variance, port_returns, c = port_returns/port_variance,marker = 'o')

#叉號：有效前沿

plt.scatter(target_variance,target_returns, c = target_returns/target_variance, marker = 'x')

#紅星：標記最高sharpe組合

plt.plot(statistics(opts['x'])[1], statistics(opts['x'])[0], 'r*', markersize = 15.0)

#黃星：標記最小方差組合

plt.plot(statistics(optv['x'])[1], statistics(optv['x'])[0], 'y*', markersize = 15.0)

plt.grid(True)

plt.xlabel('expected volatility')

plt.ylabel('expected return')

plt.colorbar(label = 'Sharpe ratio')

Out[16]:


